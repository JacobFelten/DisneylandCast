// <auto-generated />
using System;
using DisneylandCast.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DisneylandCast.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DisneylandCast.Models.Location", b =>
                {
                    b.Property<string>("LocationID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Info");

                    b.Property<string>("Link");

                    b.Property<string>("Name");

                    b.HasKey("LocationID");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("DisneylandCast.Models.Message", b =>
                {
                    b.Property<int>("MessageID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Important");

                    b.Property<string>("MessageText")
                        .IsRequired();

                    b.Property<string>("Receiver")
                        .IsRequired();

                    b.Property<string>("Sender")
                        .IsRequired();

                    b.Property<bool>("Sent");

                    b.Property<DateTime>("Time");

                    b.Property<int?>("UserID");

                    b.Property<int?>("UserID1");

                    b.HasKey("MessageID");

                    b.HasIndex("UserID");

                    b.HasIndex("UserID1");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DisneylandCast.Models.Person", b =>
                {
                    b.Property<string>("PersonID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bio");

                    b.Property<string>("Link");

                    b.Property<string>("Name");

                    b.Property<string>("Username");

                    b.HasKey("PersonID");

                    b.ToTable("People");
                });

            modelBuilder.Entity("DisneylandCast.Models.Reply", b =>
                {
                    b.Property<int>("ReplyID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MessageID");

                    b.Property<string>("ReplyText");

                    b.Property<DateTime>("Time");

                    b.HasKey("ReplyID");

                    b.HasIndex("MessageID");

                    b.ToTable("Replies");
                });

            modelBuilder.Entity("DisneylandCast.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DisneylandCast.Models.Message", b =>
                {
                    b.HasOne("DisneylandCast.Models.User")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("UserID");

                    b.HasOne("DisneylandCast.Models.User")
                        .WithMany("SentMessages")
                        .HasForeignKey("UserID1");
                });

            modelBuilder.Entity("DisneylandCast.Models.Reply", b =>
                {
                    b.HasOne("DisneylandCast.Models.Message")
                        .WithMany("Replies")
                        .HasForeignKey("MessageID");
                });
#pragma warning restore 612, 618
        }
    }
}
